<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.iotequ.reader.dao.DevAuthConfigDao">
  <resultMap id="BaseResultMap" type="top.iotequ.reader.pojo.DevAuthConfig">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="role_id" jdbcType="INTEGER" property="roleId" />
    <result column="begin_at" jdbcType="DATE" property="beginAt" />
    <result column="end_at" jdbcType="DATE" property="endAt" />
    <result column="start_time" jdbcType="TIME" property="startTime" />
    <result column="end_time" jdbcType="TIME" property="endTime" />
    <result column="only_work_day" jdbcType="VARCHAR" property="onlyWorkDay" />
    <result column="auth" jdbcType="INTEGER" property="auth" />
  </resultMap>
  <sql id = "selectSql">
     SELECT id,role_id,begin_at,end_at,start_time,end_time,only_work_day,auth FROM dev_auth_config
  </sql>
  <insert id="insert" parameterType="top.iotequ.reader.pojo.DevAuthConfig">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer" databaseId="SQLServer">
      SELECT @@IDENTITY
    </selectKey>
    insert into dev_auth_config (role_id,begin_at,end_at,start_time,end_time,only_work_day,auth)
      values 
      (#{roleId,jdbcType=INTEGER},#{beginAt,jdbcType=DATE},#{endAt,jdbcType=DATE},#{startTime,jdbcType=TIME},#{endTime,jdbcType=TIME},#{onlyWorkDay,jdbcType=VARCHAR},#{auth,jdbcType=INTEGER})
  </insert>
  <insert id="insert" parameterType="top.iotequ.reader.pojo.DevAuthConfig" databaseId="Oracle">
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer" >
      SELECT SEQUENCE_DEV_AUTH_CONFIG.nextval from DUAL
    </selectKey>
    insert into dev_auth_config (id,role_id,begin_at,end_at,start_time,end_time,only_work_day,auth)
      values 
      (#{id,jdbcType=INTEGER},#{roleId,jdbcType=INTEGER},#{beginAt,jdbcType=DATE},#{endAt,jdbcType=DATE},#{startTime,jdbcType=TIME},#{endTime,jdbcType=TIME},#{onlyWorkDay,jdbcType=VARCHAR},#{auth,jdbcType=INTEGER})
  </insert>
  <insert id="insertBatchWithoutId" parameterType="top.iotequ.reader.pojo.DevAuthConfig">
    insert into dev_auth_config (role_id,begin_at,end_at,start_time,end_time,only_work_day,auth)
      values 
    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.roleId,jdbcType=INTEGER},#{item.beginAt,jdbcType=DATE},#{item.endAt,jdbcType=DATE},#{item.startTime,jdbcType=TIME},#{item.endTime,jdbcType=TIME},#{item.onlyWorkDay,jdbcType=VARCHAR},#{item.auth,jdbcType=INTEGER})
    </foreach>
  </insert>
  <insert id="insertBatchWithoutId" parameterType="top.iotequ.reader.pojo.DevAuthConfig" databaseId="Oracle">
     insert into dev_auth_config (id,role_id,begin_at,end_at,start_time,end_time,only_work_day,auth)
       select SEQUENCE_DEV_AUTH_CONFIG.nextval,cd.* from(
          <foreach collection="list" item="item" index="index" separator="union all">
             select #{item.roleId,jdbcType=INTEGER},#{item.beginAt,jdbcType=DATE},#{item.endAt,jdbcType=DATE},#{item.startTime,jdbcType=TIME},#{item.endTime,jdbcType=TIME},#{item.onlyWorkDay,jdbcType=VARCHAR},#{item.auth,jdbcType=INTEGER} from dual
          </foreach>
       ) cd
  </insert>
  <insert id="insertBatchWithId" parameterType="top.iotequ.reader.pojo.DevAuthConfig">
    insert into dev_auth_config (id,role_id,begin_at,end_at,start_time,end_time,only_work_day,auth)
      values 
    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.id,jdbcType=INTEGER},#{item.roleId,jdbcType=INTEGER},#{item.beginAt,jdbcType=DATE},#{item.endAt,jdbcType=DATE},#{item.startTime,jdbcType=TIME},#{item.endTime,jdbcType=TIME},#{item.onlyWorkDay,jdbcType=VARCHAR},#{item.auth,jdbcType=INTEGER})
    </foreach>
  </insert>
  <insert id="insertBatchWithId" parameterType="top.iotequ.reader.pojo.DevAuthConfig" databaseId="SQLServer">
    set IDENTITY_INSERT dev_auth_config ON 
    insert into dev_auth_config (id,role_id,begin_at,end_at,start_time,end_time,only_work_day,auth)
      values 
    <foreach collection="list" item="item" index="index" separator=",">
      (#{item.id,jdbcType=INTEGER},#{item.roleId,jdbcType=INTEGER},#{item.beginAt,jdbcType=DATE},#{item.endAt,jdbcType=DATE},#{item.startTime,jdbcType=TIME},#{item.endTime,jdbcType=TIME},#{item.onlyWorkDay,jdbcType=VARCHAR},#{item.auth,jdbcType=INTEGER})
    </foreach>
    set IDENTITY_INSERT dev_auth_config OFF 
  </insert>
  <insert id="insertBatchWithId" parameterType="top.iotequ.reader.pojo.DevAuthConfig" databaseId="Oracle">
    insert all 
    <foreach collection="list" item="item" index="index">
      into dev_auth_config (id,role_id,begin_at,end_at,start_time,end_time,only_work_day,auth) values(#{item.id,jdbcType=INTEGER},#{item.roleId,jdbcType=INTEGER},#{item.beginAt,jdbcType=DATE},#{item.endAt,jdbcType=DATE},#{item.startTime,jdbcType=TIME},#{item.endTime,jdbcType=TIME},#{item.onlyWorkDay,jdbcType=VARCHAR},#{item.auth,jdbcType=INTEGER})
    </foreach>
    select 1 from dual
  </insert>
  <select id="select" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <include refid="selectSql" /> where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="delete" parameterType="java.lang.Integer">
    delete from dev_auth_config where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteBatch" parameterType="java.lang.String">
    delete from dev_auth_config where id in (${_parameter})
  </delete>
  <delete id="deleteList" parameterType="java.util.List">
    delete from dev_auth_config where id in
    <foreach collection="list" item="item" index="index" open="(" separator="," close=")"> 
       #{item.id,jdbcType=INTEGER}
    </foreach>
  </delete>
  <update id="update" parameterType="top.iotequ.reader.pojo.DevAuthConfig">
    update dev_auth_config set 
      role_id = #{roleId,jdbcType=INTEGER},
      begin_at = #{beginAt,jdbcType=DATE},
      end_at = #{endAt,jdbcType=DATE},
      start_time = #{startTime,jdbcType=TIME},
      end_time = #{endTime,jdbcType=TIME},
      only_work_day = #{onlyWorkDay,jdbcType=VARCHAR},
      auth = #{auth,jdbcType=INTEGER}
      where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateSelective" parameterType="java.util.Map">
    update dev_auth_config 
      <set>
        <if test='roleId_string_ == "[null]"'> role_id = NULL, </if>
        <if test='roleId != null and roleId_string_ != "[null]"'> role_id = #{roleId,jdbcType=INTEGER},</if>
        <if test='beginAt_string_ == "[null]"'> begin_at = NULL, </if>
        <if test='beginAt != null and beginAt_string_ != "[null]"'> begin_at = #{beginAt,jdbcType=DATE},</if>
        <if test='endAt_string_ == "[null]"'> end_at = NULL, </if>
        <if test='endAt != null and endAt_string_ != "[null]"'> end_at = #{endAt,jdbcType=DATE},</if>
        <if test='startTime_string_ == "[null]"'> start_time = NULL, </if>
        <if test='startTime != null and startTime_string_ != "[null]"'> start_time = #{startTime,jdbcType=TIME},</if>
        <if test='endTime_string_ == "[null]"'> end_time = NULL, </if>
        <if test='endTime != null and endTime_string_ != "[null]"'> end_time = #{endTime,jdbcType=TIME},</if>
        <if test='onlyWorkDay_string_ == "[null]"'> only_work_day = NULL, </if>
        <if test='onlyWorkDay != null and onlyWorkDay_string_ != "[null]"'> only_work_day = #{onlyWorkDay,jdbcType=VARCHAR},</if>
        <if test='auth_string_ == "[null]"'> auth = NULL, </if>
        <if test='auth != null and auth_string_ != "[null]"'> auth = #{auth,jdbcType=INTEGER},</if>
      </set>
      where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateBy" parameterType="top.iotequ.reader.pojo.DevAuthConfig">
    update dev_auth_config set 
      id = #{record.id,jdbcType=INTEGER},
      role_id = #{record.roleId,jdbcType=INTEGER},
      begin_at = #{record.beginAt,jdbcType=DATE},
      end_at = #{record.endAt,jdbcType=DATE},
      start_time = #{record.startTime,jdbcType=TIME},
      end_time = #{record.endTime,jdbcType=TIME},
      only_work_day = #{record.onlyWorkDay,jdbcType=VARCHAR},
      auth = #{record.auth,jdbcType=INTEGER}
      where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="list" parameterType="top.iotequ.reader.pojo.DevAuthConfig" resultMap="BaseResultMap">
    <include refid="selectSql" />
     where 1=1 
        <if test="id != null"> and id = #{id,jdbcType=INTEGER} </if>
        <if test="roleId != null"> and role_id = #{roleId,jdbcType=INTEGER} </if>
        <if test="beginAt != null"> and begin_at like #{beginAt,jdbcType=DATE} </if>
        <if test="endAt != null"> and end_at like #{endAt,jdbcType=DATE} </if>
        <if test="startTime != null"> and start_time like #{startTime,jdbcType=TIME} </if>
        <if test="endTime != null"> and end_time like #{endTime,jdbcType=TIME} </if>
        <if test="onlyWorkDay != null"> and only_work_day = #{onlyWorkDay,jdbcType=VARCHAR} </if>
        <if test="auth != null"> and auth = #{auth,jdbcType=INTEGER} </if>
  </select>
  <select id="listBy" parameterType="map" resultMap="BaseResultMap">
    <include refid="selectSql" />
        <if test="whereString != null and whereString !=''"> where ${whereString} </if>
        <if test="orderString != null and orderString!=''"> order by ${orderString} </if>
  </select>
  <select id="query" parameterType="map" resultMap="BaseResultMap">
        ${sqlString}
  </select>
</mapper>
